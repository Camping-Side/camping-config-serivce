name: CI-CD

on:
  push:
    branches:
      - master
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RESOURCE_PATH: ./src/main/resources/application-dev.yml
  BOOTSTRAP_PATH: ./src/main/resources/bootstrap-dev.yml

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body: |
            Release notes for version ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      # Git 태그에서 버전 정보를 가져옵니다.


#      - name: Deploy Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: artifact
#          path: target/config-service-1.0.jar.jar
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.rabbitmq.password: ${{ secrets.RABBITMQ_PASSWORD }}

      - name: Set Bootstrap yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.BOOTSTRAP_PATH }}
        env:
          encrypt.key: ${{ secrets.CONFIG_ENCRYPT_KEY }}

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Login to Github Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: latest=true
          tags: |
            ${{ env.RELEASE_VERSION }}

      # Dockerfile 기준으로 빌드가 성공하면 이미지를 Github 패키지로 푸시함
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

